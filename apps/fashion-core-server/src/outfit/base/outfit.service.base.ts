/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Outfit as PrismaOutfit,
  TryOnSession as PrismaTryOnSession,
} from "@prisma/client";

export class OutfitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OutfitCountArgs, "select">): Promise<number> {
    return this.prisma.outfit.count(args);
  }

  async outfits(args: Prisma.OutfitFindManyArgs): Promise<PrismaOutfit[]> {
    return this.prisma.outfit.findMany(args);
  }
  async outfit(
    args: Prisma.OutfitFindUniqueArgs
  ): Promise<PrismaOutfit | null> {
    return this.prisma.outfit.findUnique(args);
  }
  async createOutfit(args: Prisma.OutfitCreateArgs): Promise<PrismaOutfit> {
    return this.prisma.outfit.create(args);
  }
  async updateOutfit(args: Prisma.OutfitUpdateArgs): Promise<PrismaOutfit> {
    return this.prisma.outfit.update(args);
  }
  async deleteOutfit(args: Prisma.OutfitDeleteArgs): Promise<PrismaOutfit> {
    return this.prisma.outfit.delete(args);
  }

  async findTryOnSessions(
    parentId: string,
    args: Prisma.TryOnSessionFindManyArgs
  ): Promise<PrismaTryOnSession[]> {
    return this.prisma.outfit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tryOnSessions(args);
  }
}
