/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Outfit } from "./Outfit";
import { OutfitCountArgs } from "./OutfitCountArgs";
import { OutfitFindManyArgs } from "./OutfitFindManyArgs";
import { OutfitFindUniqueArgs } from "./OutfitFindUniqueArgs";
import { CreateOutfitArgs } from "./CreateOutfitArgs";
import { UpdateOutfitArgs } from "./UpdateOutfitArgs";
import { DeleteOutfitArgs } from "./DeleteOutfitArgs";
import { TryOnSessionFindManyArgs } from "../../tryOnSession/base/TryOnSessionFindManyArgs";
import { TryOnSession } from "../../tryOnSession/base/TryOnSession";
import { OutfitService } from "../outfit.service";
@graphql.Resolver(() => Outfit)
export class OutfitResolverBase {
  constructor(protected readonly service: OutfitService) {}

  async _outfitsMeta(
    @graphql.Args() args: OutfitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Outfit])
  async outfits(@graphql.Args() args: OutfitFindManyArgs): Promise<Outfit[]> {
    return this.service.outfits(args);
  }

  @graphql.Query(() => Outfit, { nullable: true })
  async outfit(
    @graphql.Args() args: OutfitFindUniqueArgs
  ): Promise<Outfit | null> {
    const result = await this.service.outfit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Outfit)
  async createOutfit(@graphql.Args() args: CreateOutfitArgs): Promise<Outfit> {
    return await this.service.createOutfit({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Outfit)
  async updateOutfit(
    @graphql.Args() args: UpdateOutfitArgs
  ): Promise<Outfit | null> {
    try {
      return await this.service.updateOutfit({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Outfit)
  async deleteOutfit(
    @graphql.Args() args: DeleteOutfitArgs
  ): Promise<Outfit | null> {
    try {
      return await this.service.deleteOutfit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [TryOnSession], { name: "tryOnSessions" })
  async findTryOnSessions(
    @graphql.Parent() parent: Outfit,
    @graphql.Args() args: TryOnSessionFindManyArgs
  ): Promise<TryOnSession[]> {
    const results = await this.service.findTryOnSessions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
