/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OutfitService } from "../outfit.service";
import { OutfitCreateInput } from "./OutfitCreateInput";
import { Outfit } from "./Outfit";
import { OutfitFindManyArgs } from "./OutfitFindManyArgs";
import { OutfitWhereUniqueInput } from "./OutfitWhereUniqueInput";
import { OutfitUpdateInput } from "./OutfitUpdateInput";
import { TryOnSessionFindManyArgs } from "../../tryOnSession/base/TryOnSessionFindManyArgs";
import { TryOnSession } from "../../tryOnSession/base/TryOnSession";
import { TryOnSessionWhereUniqueInput } from "../../tryOnSession/base/TryOnSessionWhereUniqueInput";

export class OutfitControllerBase {
  constructor(protected readonly service: OutfitService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Outfit })
  async createOutfit(@common.Body() data: OutfitCreateInput): Promise<Outfit> {
    return await this.service.createOutfit({
      data: data,
      select: {
        category: true,
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Outfit] })
  @ApiNestedQuery(OutfitFindManyArgs)
  async outfits(@common.Req() request: Request): Promise<Outfit[]> {
    const args = plainToClass(OutfitFindManyArgs, request.query);
    return this.service.outfits({
      ...args,
      select: {
        category: true,
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Outfit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async outfit(
    @common.Param() params: OutfitWhereUniqueInput
  ): Promise<Outfit | null> {
    const result = await this.service.outfit({
      where: params,
      select: {
        category: true,
        createdAt: true,
        description: true,
        id: true,
        imageUrl: true,
        name: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Outfit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOutfit(
    @common.Param() params: OutfitWhereUniqueInput,
    @common.Body() data: OutfitUpdateInput
  ): Promise<Outfit | null> {
    try {
      return await this.service.updateOutfit({
        where: params,
        data: data,
        select: {
          category: true,
          createdAt: true,
          description: true,
          id: true,
          imageUrl: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Outfit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOutfit(
    @common.Param() params: OutfitWhereUniqueInput
  ): Promise<Outfit | null> {
    try {
      return await this.service.deleteOutfit({
        where: params,
        select: {
          category: true,
          createdAt: true,
          description: true,
          id: true,
          imageUrl: true,
          name: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/tryOnSessions")
  @ApiNestedQuery(TryOnSessionFindManyArgs)
  async findTryOnSessions(
    @common.Req() request: Request,
    @common.Param() params: OutfitWhereUniqueInput
  ): Promise<TryOnSession[]> {
    const query = plainToClass(TryOnSessionFindManyArgs, request.query);
    const results = await this.service.findTryOnSessions(params.id, {
      ...query,
      select: {
        createdAt: true,
        feedback: true,
        id: true,

        outfit: {
          select: {
            id: true,
          },
        },

        tryOnDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/tryOnSessions")
  async connectTryOnSessions(
    @common.Param() params: OutfitWhereUniqueInput,
    @common.Body() body: TryOnSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tryOnSessions: {
        connect: body,
      },
    };
    await this.service.updateOutfit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/tryOnSessions")
  async updateTryOnSessions(
    @common.Param() params: OutfitWhereUniqueInput,
    @common.Body() body: TryOnSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tryOnSessions: {
        set: body,
      },
    };
    await this.service.updateOutfit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/tryOnSessions")
  async disconnectTryOnSessions(
    @common.Param() params: OutfitWhereUniqueInput,
    @common.Body() body: TryOnSessionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      tryOnSessions: {
        disconnect: body,
      },
    };
    await this.service.updateOutfit({
      where: params,
      data,
      select: { id: true },
    });
  }
}
