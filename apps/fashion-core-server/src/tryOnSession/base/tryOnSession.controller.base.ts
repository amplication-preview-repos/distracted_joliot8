/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TryOnSessionService } from "../tryOnSession.service";
import { TryOnSessionCreateInput } from "./TryOnSessionCreateInput";
import { TryOnSession } from "./TryOnSession";
import { TryOnSessionFindManyArgs } from "./TryOnSessionFindManyArgs";
import { TryOnSessionWhereUniqueInput } from "./TryOnSessionWhereUniqueInput";
import { TryOnSessionUpdateInput } from "./TryOnSessionUpdateInput";

export class TryOnSessionControllerBase {
  constructor(protected readonly service: TryOnSessionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TryOnSession })
  async createTryOnSession(
    @common.Body() data: TryOnSessionCreateInput
  ): Promise<TryOnSession> {
    return await this.service.createTryOnSession({
      data: {
        ...data,

        outfit: data.outfit
          ? {
              connect: data.outfit,
            }
          : undefined,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        feedback: true,
        id: true,

        outfit: {
          select: {
            id: true,
          },
        },

        tryOnDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TryOnSession] })
  @ApiNestedQuery(TryOnSessionFindManyArgs)
  async tryOnSessions(@common.Req() request: Request): Promise<TryOnSession[]> {
    const args = plainToClass(TryOnSessionFindManyArgs, request.query);
    return this.service.tryOnSessions({
      ...args,
      select: {
        createdAt: true,
        feedback: true,
        id: true,

        outfit: {
          select: {
            id: true,
          },
        },

        tryOnDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TryOnSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async tryOnSession(
    @common.Param() params: TryOnSessionWhereUniqueInput
  ): Promise<TryOnSession | null> {
    const result = await this.service.tryOnSession({
      where: params,
      select: {
        createdAt: true,
        feedback: true,
        id: true,

        outfit: {
          select: {
            id: true,
          },
        },

        tryOnDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TryOnSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTryOnSession(
    @common.Param() params: TryOnSessionWhereUniqueInput,
    @common.Body() data: TryOnSessionUpdateInput
  ): Promise<TryOnSession | null> {
    try {
      return await this.service.updateTryOnSession({
        where: params,
        data: {
          ...data,

          outfit: data.outfit
            ? {
                connect: data.outfit,
              }
            : undefined,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          feedback: true,
          id: true,

          outfit: {
            select: {
              id: true,
            },
          },

          tryOnDate: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TryOnSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTryOnSession(
    @common.Param() params: TryOnSessionWhereUniqueInput
  ): Promise<TryOnSession | null> {
    try {
      return await this.service.deleteTryOnSession({
        where: params,
        select: {
          createdAt: true,
          feedback: true,
          id: true,

          outfit: {
            select: {
              id: true,
            },
          },

          tryOnDate: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
