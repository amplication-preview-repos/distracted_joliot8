/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TryOnSession as PrismaTryOnSession,
  Outfit as PrismaOutfit,
  User as PrismaUser,
} from "@prisma/client";

export class TryOnSessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TryOnSessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tryOnSession.count(args);
  }

  async tryOnSessions(
    args: Prisma.TryOnSessionFindManyArgs
  ): Promise<PrismaTryOnSession[]> {
    return this.prisma.tryOnSession.findMany(args);
  }
  async tryOnSession(
    args: Prisma.TryOnSessionFindUniqueArgs
  ): Promise<PrismaTryOnSession | null> {
    return this.prisma.tryOnSession.findUnique(args);
  }
  async createTryOnSession(
    args: Prisma.TryOnSessionCreateArgs
  ): Promise<PrismaTryOnSession> {
    return this.prisma.tryOnSession.create(args);
  }
  async updateTryOnSession(
    args: Prisma.TryOnSessionUpdateArgs
  ): Promise<PrismaTryOnSession> {
    return this.prisma.tryOnSession.update(args);
  }
  async deleteTryOnSession(
    args: Prisma.TryOnSessionDeleteArgs
  ): Promise<PrismaTryOnSession> {
    return this.prisma.tryOnSession.delete(args);
  }

  async getOutfit(parentId: string): Promise<PrismaOutfit | null> {
    return this.prisma.tryOnSession
      .findUnique({
        where: { id: parentId },
      })
      .outfit();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.tryOnSession
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
